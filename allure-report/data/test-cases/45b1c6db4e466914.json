{"uid":"45b1c6db4e466914","name":"Тест получения заказов пользователя","fullName":"tests.get_order_test.TestGetOrder#test_get_order","historyId":"257972d86a1826b79acc22cfe283c825","time":{"start":1734596530821,"stop":1734596534370,"duration":3549},"status":"failed","statusMessage":"AssertionError: assert 1 == 2\n +  where 1 = len([{'_id': '6763d7a09ed280001b53a950', 'createdAt': '2024-12-19T08:21:52.141Z', 'ingredients': ['61c0c5a71d1f82001bdaaa6d', '61c0c5a71d1f82001bdaaa6f'], 'name': 'Бессмертный флюоресцентный бургер', ...}])","statusTrace":"self = <get_order_test.TestGetOrder object at 0x00000269E57EBD90>\ncreate_new_user = ({'email': 'r.shchetnikov:80587871@yandex.ru', 'name': 'Username:80587871', 'password': 'password:80587871'}, <Response [200]>)\n\n    @allure.title(\"Тест получения заказов пользователя\")\n    def test_get_order(self, create_new_user):\n        user_data, register_response = create_new_user\n    \n        accessToken = register_response.json()[\"accessToken\"]\n    \n        # Создание списка для передачи в создание заказа\n        ingredients_response = requests.get(MAIN_URL + GET_INGREDIENTS)\n        ingredient_list = []\n        generate_list_for_order(ingredients_response.json()[\"data\"][0][\"_id\"], ingredient_list)\n        generate_list_for_order(ingredients_response.json()[\"data\"][1][\"_id\"], ingredient_list)\n        ingredients_data = generate_body_for_order(ingredient_list)\n    \n        auth_header = generate_header_for_login(accessToken)\n    \n        requests.post(MAIN_URL+ORDER, data=ingredients_data, headers=auth_header)\n        order_response = requests.get(MAIN_URL+ORDER, headers=auth_header)\n    \n        assert order_response.status_code == 200\n        assert order_response.json()[\"success\"] == True\n>       assert len(order_response.json()[\"orders\"]) == 2\nE       AssertionError: assert 1 == 2\nE        +  where 1 = len([{'_id': '6763d7a09ed280001b53a950', 'createdAt': '2024-12-19T08:21:52.141Z', 'ingredients': ['61c0c5a71d1f82001bdaaa6d', '61c0c5a71d1f82001bdaaa6f'], 'name': 'Бессмертный флюоресцентный бургер', ...}])\n\ntests\\get_order_test.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"create_new_user","time":{"start":1734596530302,"stop":1734596530820,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"get_order_test"},{"name":"subSuite","value":"TestGetOrder"},{"name":"host","value":"DESKTOP-7LU8FN0"},{"name":"thread","value":"14980-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.get_order_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"45b1c6db4e466914.json","parameterValues":[]}